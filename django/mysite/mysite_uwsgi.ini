; WSGI    -->  网关、接口
; uWSGI  -->  一种服务(Application server)
; uwsgi    -->  線路協議(uWSGI最支援的一種規範或者說是協議)
; uWSGI 通过 xxx.ini 启动后会在相同目录下生成一个 xxx.pid 的文件，里面只有一行内容是 uWSGI 的主进程的进程号。
[uwsgi]
;  # 指定運行目錄位置
chdir = /mysite

; # 選擇協議方式，三選一即可
; http = 0.0.0.0:5000 
; http-socekt = 0.0.0.0:5001  
; socket = :3031  # 使用 socket 选项运行，使用 uWSGI 的 pid 来查看它所占用的端口，是查不到的，因为不走 TCP
socket = :8001 
; # sock 文件的路径的權限
chmod-socket = 777 
; # 主要運行的 py 檔案
wsgi-file =  mysite/wsgi.py 
; # 開啟一個主進程，管理其他uwsgi進程(子進程)，如果kill master等於重啟所有uwsgi進程
master = true  
; workers = 4  # 一般為 CPU 數 * 2
; # 生成指定數目的進程/worker
processes = 4
;  # 每個進程有2個線程
threads = 2
; --stats 设置一个地址，可以通过该地址监控运行状态，输出 JSON 格式的数据
stats = :9191
;  #允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程
enable-threads = true
;  # 當服務器退出的時候自動清理環境，刪除unix socket文件和pid文件
vacuum = true

; 考量安全性，不要使用 root 权限来运行 uWSGI，添加 uid 和 gid 选项指定用户和组。
; # uid = hugin
; # gid = hugin
;  # pid 文件位置
; touch-reload = %p
pidfile =mysite_uwsgi.pid
; ;  # 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器
; daemonize = odin_restful_uwsgi.log
; listen = 120 #设置socket的监听队列大小（默认：100）